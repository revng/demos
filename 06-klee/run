#!/usr/bin/env bash

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
source "${SCRIPT_DIR}/../common"

cd "$SCRIPT_DIR"

# Compile to binary, with optimizations, but disabling stack protector and
# optimizations around tail calls, to ease source-to-binary matching for demo
gcc -O2 -fno-stack-protector -fno-optimize-sibling-calls use-after-free.c -o use-after-free.bin

# Lift with revng and generate clean IR
revng artifact cleanup-ir --analyze --debug-names use-after-free.bin | zstdcat > use-after-free.ll

# Dump the CFG for visualization
"${OPT}" -passes=dot-cfg use-after-free.ll
# Can be visualized with xdot .local_do_stuff.dot

# Compile and link with support library, used to show klee that calls to
# dynamic_* in the lifted LLVM IR are actually just wrappers around libc.
"${CLANG}" -O2 -fno-stack-protector support.c -Xclang -emit-llvm -S -o support.ll
"${LLVM_LINK}" use-after-free.ll support.ll -o use-after-free.bc

# Invoke klee, instructing it that we're running in a POSIX environment, telling
# it to use its own model of the libc, and to consider the CLI arguments as
# symbolic, always passing at least 1, and at most 1, with exactly 2 bytes of
# lenght.
klee --posix-runtime --libc=klee use-after-free.bc --sym-args 1 1 2
