#!/usr/bin/env bash

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
source "${SCRIPT_DIR}/../common"

cd "$SCRIPT_DIR"

# Compile to binary, with optimizations, but disabling stack protector and
# optimizations around tail calls, to ease source-to-binary matching for demo
gcc -O2 -fno-stack-protector -fno-optimize-sibling-calls use-after-free.c -o use-after-free.bin

# Lift with revng generate all decompiled C code in a single tar.gz, and unpack it in a single directory
revng artifact --debug-names emit-recompilable-archive --analyze use-after-free.bin -o - | tar xfz -

# CodeQL can't see across functions by default. Unwrap calls to myfree.
sed 's/  my_free/  free/g' decompiled/functions.c > decompiled/functions.normalized.c

# Invoke codeql on the decompiled C code
codeql database create --overwrite codeql.db --language=cpp --command='gcc -c decompiled/functions.normalized.c -o /dev/null'
codeql database analyze codeql.db --download codeql/cpp-queries --verbose --format=csv --output=codeql.output.csv --threads=16 --rerun
